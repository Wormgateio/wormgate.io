// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String       @id @default(uuid())
  createdAt              DateTime     @default(now()) @map("created_at")
  metamaskWalletAddress  String       @unique @map("metamask_wallet_address")
  followedGetmintTwitter Boolean      @default(false) @map("followed_getmint_twitter")
  twitterEnabled         Boolean      @default(false) @map("twitter_enabled")
  twitterLogin           String?      @map("twitter_login")
  twitterToken           Json?        @map("twitter_token")
  avatar                 String?
  // ID пользователя, кто пригласил другого пользователя в сервис
  reffererId             String?
  reffererAddress        String?
  nfts                   Nft[]
  balanceLogs            BalanceLog[]

  @@map(name: "users")
}

model Nft {
  id              String      @id @default(uuid())
  pinataImageHash String      @unique @map("pinata_image_hash")
  pinataJsonHash  String      @unique @map("pinata_json_hash")
  name            String
  description     String?     @default("")
  createdAt       DateTime    @default(now()) @map("created_at")
  tokenId         Int
  userId          String      @map("user_id")
  user            User        @relation(fields: [userId], references: [id])
  mintLog         MintLog[]
  bridgeLog       BridgeLog[]
  tweetLog        TweetLog?
  chainId         String      @map("chain_id")
  chain           Chain       @relation(fields: [chainId], references: [id])

  @@map(name: "nfts")
}

model BalanceLog {
  id          String           @id @default(uuid())
  createdAt   DateTime         @default(now()) @map("created_at")
  userId      String           @map("user_id")
  user        User             @relation(fields: [userId], references: [id])
  amount      Int
  operation   BalanceOperation
  type        BalanceLogType
  description String?
  mintLog     MintLog?
  bridgeLog   BridgeLog?
  tweetLog    TweetLog?
  refferalLog RefferalLog?

  @@map(name: "balance_logs")
}

model MintLog {
  id              String     @id @default(uuid())
  nft             Nft        @relation(fields: [nftId], references: [id])
  nftId           String     @map("nft_id")
  balanceLog      BalanceLog @relation(fields: [balanceLogId], references: [id])
  balanceLogId    String     @unique @map("balance_log_id")
  transactionHash String     @map("transaction_hash")

  @@map(name: "mint_logs")
}

model BridgeLog {
  id              String     @id @default(uuid())
  nft             Nft        @relation(fields: [nftId], references: [id])
  nftId           String     @map("nft_id")
  balanceLog      BalanceLog @relation(fields: [balanceLogId], references: [id])
  balanceLogId    String     @unique @map("balance_log_id")
  transactionHash String     @map("transaction_hash")
  previousChain   String
  nextChain       String

  @@map(name: "bridge_logs")
}

model TweetLog {
  id           String     @id @default(uuid())
  nft          Nft        @relation(fields: [nftId], references: [id])
  nftId        String     @unique @map("nft_id")
  balanceLog   BalanceLog @relation(fields: [balanceLogId], references: [id], onDelete: Cascade)
  balanceLogId String     @unique @map("balance_log_id")
  tweetId      String     @unique @map("tweet_id")

  @@map(name: "tweet_logs")
}

model RefferalLog {
  id           String     @id @default(uuid())
  balanceLog   BalanceLog @relation(fields: [balanceLogId], references: [id], onDelete: Cascade)
  balanceLogId String     @unique @map("balance_log_id")

  // Кто пригласил
  reffererId String @map("refferer_id")
  // Кого пригласили
  refferalId String @map("refferal_id")

  @@map(name: "refferal_logs")
}

model Chain {
  id      String  @id @default(uuid())
  name    String
  network String
  chainId Int     @unique @map("chain_id")
  lzChain Int     @map("lz_chain")
  rpcUrl  String?
  token   String?
  Nft     Nft[]

  @@map(name: "chains")
}

enum BalanceOperation {
  credit
  debit
}

enum BalanceLogType {
  refferal
  twitter_activity_daily
  twitter_getmint_subscription
  create_tweet
  mint
  bridge
}
